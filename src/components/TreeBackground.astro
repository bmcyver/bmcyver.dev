---
import { Icon } from 'astro-icon/components'

interface Props {
  size?: 'sm' | 'md' | 'lg'
  density?: 'low' | 'medium' | 'high'
}

const { size = 'md', density = 'medium' } = Astro.props

const getIconConfig = () => {
  if (size === 'sm') {
    return {
      baseSize: 16,
      positions: density === 'low' ? 4 : density === 'medium' ? 6 : 8,
    }
  } else if (size === 'lg') {
    return {
      baseSize: 22,
      positions: density === 'low' ? 7 : density === 'medium' ? 10 : 14,
    }
  } else {
    // 기본 'md' 사이즈
    return {
      baseSize: 18,
      positions: density === 'low' ? 5 : density === 'medium' ? 8 : 12,
    }
  }
}

const config = getIconConfig()
const iconTypes = ['tree-deciduous', 'tree-pine', 'tree-palm']
const icons = []

const gridSize = Math.ceil(Math.sqrt(config.positions))
const cellWidth = 100 / gridSize
const cellHeight = 100 / gridSize

for (let i = 0; i < config.positions; i++) {
  const gridRow = Math.floor(i / gridSize)
  const gridCol = i % gridSize

  const deviation = cellWidth * 0.6
  const top = gridRow * cellHeight + Math.random() * deviation
  const left = gridCol * cellWidth + Math.random() * deviation

  const iconType = iconTypes[Math.floor(Math.random() * iconTypes.length)]
  const iconSize = config.baseSize - Math.floor(Math.random() * 8)
  const opacity = (Math.floor(Math.random() * 15) + 10) / 100

  const duration = 1000 + Math.floor(Math.random() * 1500)

  const translateX = Math.floor(Math.random() * 20) - 10
  const translateY = Math.floor(Math.random() * 16) - 8

  icons.push({
    iconType,
    iconSize,
    top: Math.min(Math.max(top, 5), 95),
    left: Math.min(Math.max(left, 5), 95),
    opacity,
    duration,
    translateX,
    translateY,
  })
}

const additionalCount = density === 'high' ? 6 : density === 'medium' ? 3 : 1
for (let i = 0; i < additionalCount; i++) {
  const iconType = iconTypes[Math.floor(Math.random() * iconTypes.length)]
  const iconSize = config.baseSize - Math.floor(Math.random() * 8) - 3
  const top = Math.floor(Math.random() * 85) + 5
  const left = Math.floor(Math.random() * 85) + 5
  const opacity = (Math.floor(Math.random() * 10) + 5) / 100
  const duration = 900 + Math.floor(Math.random() * 1200)
  const translateX = Math.floor(Math.random() * 12) - 6
  const translateY = Math.floor(Math.random() * 10) - 5

  icons.push({
    iconType,
    iconSize,
    top,
    left,
    opacity,
    duration,
    translateX,
    translateY,
  })
}
---

<div class="pointer-events-none absolute inset-0">
  {
    icons.map((icon) => (
      <Icon
        name={`lucide:${icon.iconType}`}
        style={`top: ${icon.top}%; left: ${icon.left}%; opacity: ${icon.opacity};  transition-duration: ${icon.duration}ms;`}
        class={`absolute transition-all ease-in-out group-hover:translate-x-${icon.translateX} group-hover:translate-y-${icon.translateY}`}
        size={icon.iconSize}
      />
    ))
  }
</div>
